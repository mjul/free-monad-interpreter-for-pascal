// Grammar for a small subset of the Pascal language
//
// Adapted from https://www2.seas.gwu.edu/~hchoi/teaching/cs160d/pascal.pdf
// and the ANTLR Pascal grammar, https://github.com/antlr/grammars-v4/blob/master/pascal/pascal.g4

// The grammar is written in Pest, a parser generator for Rust

// Terminal symbols are normally uppercase
// prefixing strings with ^ makes them case-insensitive
// See https://docs.rs/pest/latest/pest/#expressions

// By defining WHITESPACE, a special rule, we can use it in the grammar to ignore whitespace
// It is a special rule that runs between productions.
// The _ prefix means that the rule does not produce any tokens
// See https://docs.rs/pest/latest/pest/index.html#whitespace-and-comment
WHITESPACE = _{ " " | "\t" | "\r" | "\n" }

DOT = {"."}
COLON = {":"}
SEMICOLON = {";"}
COMMA = {","}
UNDERSCORE = {"_"}

// Terminals for keywords, note the use of ^ since they are case-insensitive
// Note that we use the ~ and ! combinators to match the keywords exactly, since
// if an IDENT starts with a keyword it is still an IDENT, e.g. "program1" is not a keyword
// Note that we use the @ modifier to mark the rule "atomic", meaning it will not
// accept whitespace between the tokens.

// Pascal identifiers are case-insensitive, ASCII_ALPHA is [a-zA-Z]
// Use the @ modifier to mark the rule "atomic", meaning it will not accept whitespace inside the token.
// First we define the set of characters that can be part of an identifier after the first character
// We will define the IDENT production later, when we have define the keywords (word-symbols) to ensure that
// they are not matched as IDENT
IDENT_REST = @{ASCII_ALPHA | ASCII_DIGIT | UNDERSCORE}

AND = @{^"and" ~ !IDENT_REST}
ARRAY = {^"array" ~ !IDENT_REST}
BEGIN = @{^"begin" ~ !IDENT_REST}
CASE = @{^"case" ~ !IDENT_REST}
CONST = @{^"const" ~ !IDENT_REST}
DIV = @{^"div" ~ !IDENT_REST}
DO = @{^"do" ~ !IDENT_REST}
DOWNTO = @{^"downto" ~ !IDENT_REST}
ELSE = @{^"else" ~ !IDENT_REST}
END = @{^"end" ~ !IDENT_REST}
FILE = @{^"file" ~ !IDENT_REST}
FOR = @{^"for" ~ !IDENT_REST}
FUNCTION = @{^"function" ~ !IDENT_REST}
GOTO = @{^"goto" ~ !IDENT_REST}
IF = @{^"if" ~ !IDENT_REST}
IN = @{^"in" ~ !IDENT_REST}
INTEGER = {^"integer" ~ !IDENT_REST}
LABEL = @{^"label" ~ !IDENT_REST}
MOD = @{^"mod" ~ !IDENT_REST}
NIL = @{^"nil" ~ !IDENT_REST}
NOT = @{^"not" ~ !IDENT_REST}
OF = {^"of" ~ !IDENT_REST}
OR = @{^"or" ~ !IDENT_REST}
PACKED = @{^"packed" ~ !IDENT_REST}
PROCEDURE = @{^"procedure" ~ !IDENT_REST}
PROGRAM = @{^"program" ~ !IDENT_REST}
REAL = {^"real" ~ !IDENT_REST}
RECORD = @{^"record" ~ !IDENT_REST}
REPEAT = @{^"repeat" ~ !IDENT_REST}
SET = @{^"set" ~ !IDENT_REST}
THEN = @{^"then" ~ !IDENT_REST}
TO = @{^"to" ~ !IDENT_REST}
TYPE = @{^"type" ~ !IDENT_REST}
UNTIL = @{^"until" ~ !IDENT_REST}
VAR = @{^"var" ~ !IDENT_REST}
WHILE = @{^"while" ~!IDENT_REST}
WITH = @{^"with" ~ !IDENT_REST}

// See the ISO 7185 specification for the full list of keywords, this is from section 6.1.2 Special-symbols
// https://github.com/antlr/grammars-v4/blob/master/pascal/iso7185.pdf

WORD_SYMBOL = @{
    AND | ARRAY | BEGIN | CASE | CONST | DIV
    | DO | DOWNTO | ELSE | END | FILE | FOR
    | FUNCTION | GOTO | IF | IN | LABEL | MOD
    | NIL | NOT | OF | OR | PACKED | PROCEDURE
    | PROGRAM  | RECORD | REPEAT | SET | THEN
    | TO | TYPE | UNTIL | VAR | WHILE | WITH
}

// We use the ! combinator to make sure that the IDENT is not a keyword
IDENT = @{!WORD_SYMBOL ~ ASCII_ALPHA ~ IDENT_REST* }


LPAREN = {"("}
RPAREN = {")"}
LBRACK = {"["}
RBRACK = {"]"}
ASSIGNOP = {":="}
PLUS = {"+"}
MINUS = {"-"}
DOTDOT = {".."}
APOSTROPHE = {"'"}

// String literals are enclosed in single quotes, and can contain escaped single quotes
STRING_LITERAL = @{
    (APOSTROPHE
    ~ ((APOSTROPHE ~ APOSTROPHE)
        | !APOSTROPHE ~ ANY)*
    ~ APOSTROPHE)
}

ADDOP = {"+" | "-" } // TODO: "OR" is not yet supported
RELOP = {"=" | "<" | ">" | "<=" | ">=" | "<>"}
MULOP = {"*" | "/" } // TODO: "DIV", "MOD" and "AND" are not yet supported
// Match digits atomically, no whitespace allowed
NUM_INT = @{ ASCII_DIGIT+ }

// Non-terminal symbols are normally lowercase
// ~ is a sequence combinator ("a" ~ "b" matches a followed by b, e.g. "ab")

program = { SOI
            ~ (PROGRAM ~ IDENT ~ LPAREN ~ identifier_list ~ RPAREN ~ SEMICOLON)
            ~ declarations
            ~ subprogram_declarations
            ~ compound_statement
            ~ DOT
            ~ EOI }

// The following rule is left-recursive, which is not supported by Pest
// identifier_list = { id | (identifier_list ~ COMMA ~ id)}
// So, we can rewrite it as follows, using the Kleene star combinator
identifier_list = { IDENT ~ (COMMA ~ IDENT)* }

// We use the ? combinator to make a rule optional instead of an or-epsilon production
// We use the * combinator to make a rule repeatable zero or more times
// (the Kleene star, see https://en.wikipedia.org/wiki/Kleene_star).
declarations = {
    (VAR ~ identifier_list ~ COLON ~ type ~ SEMICOLON)*
}

type = {
    standard_type
    | (ARRAY ~ LBRACK ~ NUM_INT ~ DOT ~ DOT ~ NUM_INT ~ RBRACK ~ OF ~ standard_type) }

standard_type = {
    INTEGER
    | REAL
    // TODO: | BOOLEAN
    // TODO: | CHAR
}

subprogram_declarations = {
    subprogram_declaration ~ (SEMICOLON ~ subprogram_declarations)?
}

subprogram_declaration = {
    subprogram_head ~ declarations ~ compound_statement
}

subprogram_head = {
    FUNCTION ~ IDENT ~ arguments ~ COLON ~ standard_type ~ SEMICOLON
    | PROCEDURE ~ IDENT ~ arguments ~ SEMICOLON
}

arguments = {
    (LPAREN ~ parameter_list ~ RPAREN)?
}

// Again rewritten to avoid left-recursion
parameter_list = {
    identifier_list ~ COLON ~ type ~ (SEMICOLON ~ identifier_list ~ COLON ~ type)*
}

compound_statement = {BEGIN ~ optional_statements ~ END}

// We don't have a en epsilon production in Pest,
// so instead of {statement_list | epsilon } we use the optional combinator
optional_statements = { statement_list? }

// Again rewritten to avoid left-recursion
statement_list = {
    statement ~ (SEMICOLON ~ statement)*
}

// So far, we have tried to keep the rules close the the grammars mentioned above,
// but do note that we could use more of the PEG features of Pest to simplify the grammar.

statement = {
    (variable ~ ASSIGNOP ~ expression)
    | procedure_statement
    | compound_statement
    | (IF ~ expression ~ THEN ~ statement ~ ELSE ~ statement)
    | (WHILE ~ expression ~ DO ~ statement)
}

// Identifier with optional array index–ë e.g. a or a[1]
// Simplified, Pascal allows more complex array indices
variable = {
    IDENT ~ (LBRACK ~ expression ~ RBRACK)?
}

procedure_statement = {
    IDENT ~ (LPAREN ~ expression_list ~ RPAREN)?
}

expression_list = {
    expression ~ (COMMA ~ expression)*
}

expression = {
    simple_expression ~ (RELOP ~ simple_expression)?
}

// Rewritten to avoid left-recursion
// This one allows a signed term at the end of the expression, unlike the Tiny Pascal grammar
simple_expression = {
    sign? ~ term ~ (ADDOP ~ simple_expression)?
}

term = {
    factor ~ (MULOP ~ factor)*
}

factor = {
    IDENT
    | (IDENT ~ LPAREN ~ expression_list ~ RPAREN)
    | num
    | (LPAREN ~ expression ~ RPAREN)
    | (NOT ~ factor)
}

sign = { PLUS | MINUS }

num = @{ NUM_INT } // TODO: add the remaining numerical types
